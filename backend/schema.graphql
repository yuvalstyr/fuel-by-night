""" A keystone list """
type User {
  id: ID!
  name: String
  email: String
  password_is_set: Boolean
}

input UserWhereInput {
  AND: [UserWhereInput]
  OR: [UserWhereInput]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID]
  id_not_in: [ID]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]
  email: String
  email_not: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  email_i: String
  email_not_i: String
  email_contains_i: String
  email_not_contains_i: String
  email_starts_with_i: String
  email_not_starts_with_i: String
  email_ends_with_i: String
  email_not_ends_with_i: String
  email_in: [String]
  email_not_in: [String]
  password_is_set: Boolean
}

input UserWhereUniqueInput {
  id: ID!
}

enum SortUsersBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
}

input UserUpdateInput {
  name: String
  email: String
  password: String
}

input UsersUpdateInput {
  id: ID!
  data: UserUpdateInput
}

input UserCreateInput {
  name: String
  email: String
  password: String
}

input UsersCreateInput {
  data: UserCreateInput
}

input ShiftRelateToManyInput {
  create: [ShiftCreateInput]
  connect: [ShiftWhereUniqueInput]
  disconnect: [ShiftWhereUniqueInput]
  disconnectAll: Boolean
}

""" A keystone list """
type Employee {
  id: ID!
  name: String
  salaryPerHour: Float
  active: String
  shifts(where: ShiftWhereInput, search: String, sortBy: [SortShiftsBy!], orderBy: String, first: Int, skip: Int): [Shift!]!
  _shiftsMeta(where: ShiftWhereInput, search: String, sortBy: [SortShiftsBy!], orderBy: String, first: Int, skip: Int): _QueryMeta
}

input EmployeeWhereInput {
  AND: [EmployeeWhereInput]
  OR: [EmployeeWhereInput]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID]
  id_not_in: [ID]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]
  salaryPerHour: Float
  salaryPerHour_not: Float
  salaryPerHour_lt: Float
  salaryPerHour_lte: Float
  salaryPerHour_gt: Float
  salaryPerHour_gte: Float
  salaryPerHour_in: [Float]
  salaryPerHour_not_in: [Float]
  active: String
  active_not: String
  active_in: [String]
  active_not_in: [String]

  """ condition must be true for all nodes """
  shifts_every: ShiftWhereInput

  """ condition must be true for at least 1 node """
  shifts_some: ShiftWhereInput

  """ condition must be false for all nodes """
  shifts_none: ShiftWhereInput
}

input EmployeeWhereUniqueInput {
  id: ID!
}

enum SortEmployeesBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  salaryPerHour_ASC
  salaryPerHour_DESC
  active_ASC
  active_DESC
  shifts_ASC
  shifts_DESC
}

input EmployeeUpdateInput {
  name: String
  salaryPerHour: Float
  active: String
  shifts: ShiftRelateToManyInput
}

input EmployeesUpdateInput {
  id: ID!
  data: EmployeeUpdateInput
}

input EmployeeCreateInput {
  name: String
  salaryPerHour: Float
  active: String
  shifts: ShiftRelateToManyInput
}

input EmployeesCreateInput {
  data: EmployeeCreateInput
}

""" A keystone list """
type Expense {
  id: ID!
  date: String
  name: String
  cost: Float
}

input ExpenseWhereInput {
  AND: [ExpenseWhereInput]
  OR: [ExpenseWhereInput]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID]
  id_not_in: [ID]
  date: String
  date_not: String
  date_lt: String
  date_lte: String
  date_gt: String
  date_gte: String
  date_in: [String]
  date_not_in: [String]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]
  cost: Float
  cost_not: Float
  cost_lt: Float
  cost_lte: Float
  cost_gt: Float
  cost_gte: Float
  cost_in: [Float]
  cost_not_in: [Float]
}

input ExpenseWhereUniqueInput {
  id: ID!
}

enum SortExpensesBy {
  id_ASC
  id_DESC
  date_ASC
  date_DESC
  name_ASC
  name_DESC
  cost_ASC
  cost_DESC
}

input ExpenseUpdateInput {
  date: String
  name: String
  cost: Float
}

input ExpensesUpdateInput {
  id: ID!
  data: ExpenseUpdateInput
}

input ExpenseCreateInput {
  date: String
  name: String
  cost: Float
}

input ExpensesCreateInput {
  data: ExpenseCreateInput
}

input EmployeeRelateToOneInput {
  create: EmployeeCreateInput
  connect: EmployeeWhereUniqueInput
  disconnect: EmployeeWhereUniqueInput
  disconnectAll: Boolean
}

""" A keystone list """
type Shift {
  id: ID!
  start: String
  end: String
  worker: Employee
}

input ShiftWhereInput {
  AND: [ShiftWhereInput]
  OR: [ShiftWhereInput]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID]
  id_not_in: [ID]
  start: String
  start_not: String
  start_lt: String
  start_lte: String
  start_gt: String
  start_gte: String
  start_in: [String]
  start_not_in: [String]
  end: String
  end_not: String
  end_lt: String
  end_lte: String
  end_gt: String
  end_gte: String
  end_in: [String]
  end_not_in: [String]
  worker: EmployeeWhereInput
  worker_is_null: Boolean
}

input ShiftWhereUniqueInput {
  id: ID!
}

enum SortShiftsBy {
  id_ASC
  id_DESC
  start_ASC
  start_DESC
  end_ASC
  end_DESC
  worker_ASC
  worker_DESC
}

input ShiftUpdateInput {
  start: String
  end: String
  worker: EmployeeRelateToOneInput
}

input ShiftsUpdateInput {
  id: ID!
  data: ShiftUpdateInput
}

input ShiftCreateInput {
  start: String
  end: String
  worker: EmployeeRelateToOneInput
}

input ShiftsCreateInput {
  data: ShiftCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type _ListAccess {
  """
  Access Control settings for the currently logged in (or anonymous)
  user when performing 'create' operations.
  NOTE: 'create' can only return a Boolean.
  It is not possible to specify a declarative Where clause for this
  operation
  """
  create: Boolean

  """
  Access Control settings for the currently logged in (or anonymous)
  user when performing 'read' operations.
  """
  read: JSON

  """
  Access Control settings for the currently logged in (or anonymous)
  user when performing 'update' operations.
  """
  update: JSON

  """
  Access Control settings for the currently logged in (or anonymous)
  user when performing 'delete' operations.
  """
  delete: JSON

  """
  Access Control settings for the currently logged in (or anonymous)
  user when performing 'auth' operations.
  """
  auth: JSON
}

type _ListQueries {
  """Single-item query name"""
  item: String

  """All-items query name"""
  list: String

  """List metadata query name"""
  meta: String
}

type _ListMutations {
  """Create mutation name"""
  create: String

  """Create many mutation name"""
  createMany: String

  """Update mutation name"""
  update: String

  """Update many mutation name"""
  updateMany: String

  """Delete mutation name"""
  delete: String

  """Delete many mutation name"""
  deleteMany: String
}

type _ListInputTypes {
  """Input type for matching multiple items"""
  whereInput: String

  """Input type for matching a unique item"""
  whereUniqueInput: String

  """Create mutation input type name"""
  createInput: String

  """Create many mutation input type name"""
  createManyInput: String

  """Update mutation name input"""
  updateInput: String

  """Update many mutation name input"""
  updateManyInput: String
}

type _ListSchemaFields {
  """The path of the field in its list"""
  path: String

  """The name of the field in its list"""
  name: String @deprecated(reason: "Use `path` instead")

  """The field type (ie, Checkbox, Text, etc)"""
  type: String
}

type _ListSchemaRelatedFields {
  """The typename as used in GraphQL queries"""
  type: String

  """A list of GraphQL field names"""
  fields: [String]
}

type _ListSchema {
  """The typename as used in GraphQL queries"""
  type: String

  """
  Top level GraphQL query names which either return this type, or
  provide aggregate information about this type
  """
  queries: _ListQueries

  """Top-level GraphQL mutation names"""
  mutations: _ListMutations

  """Top-level GraphQL input types"""
  inputTypes: _ListInputTypes

  """Information about fields defined on this list"""
  fields(where: _ListSchemaFieldsInput): [_ListSchemaFields]

  """
  Information about fields on other types which return this type, or
  provide aggregate information about this type
  """
  relatedFields: [_ListSchemaRelatedFields]
}

type _ListMeta {
  """The Keystone list key"""
  key: String

  """The Keystone List name"""
  name: String @deprecated(reason: "Use `key` instead")

  """The list's user-facing description"""
  description: String

  """The list's display name in the Admin UI"""
  label: String

  """The list's singular display name"""
  singular: String

  """The list's plural display name"""
  plural: String

  """The list's data path"""
  path: String

  """Access control configuration for the currently authenticated request"""
  access: _ListAccess

  """Information on the generated GraphQL schema"""
  schema: _ListSchema
}

type _QueryMeta {
  count: Int
}

input _ksListsMetaInput {
  key: String

  """Whether this is an auxiliary helper list"""
  auxiliary: Boolean
}

input _ListSchemaFieldsInput {
  type: String
}

type Mutation {
  """ Create a single User item. """
  createUser(data: UserCreateInput): User

  """ Create multiple User items. """
  createUsers(data: [UsersCreateInput]): [User]

  """ Update a single User item by ID. """
  updateUser(id: ID!, data: UserUpdateInput): User

  """ Update multiple User items by ID. """
  updateUsers(data: [UsersUpdateInput]): [User]

  """ Delete a single User item by ID. """
  deleteUser(id: ID!): User

  """ Delete multiple User items by ID. """
  deleteUsers(ids: [ID!]): [User]

  """ Create a single Employee item. """
  createEmployee(data: EmployeeCreateInput): Employee

  """ Create multiple Employee items. """
  createEmployees(data: [EmployeesCreateInput]): [Employee]

  """ Update a single Employee item by ID. """
  updateEmployee(id: ID!, data: EmployeeUpdateInput): Employee

  """ Update multiple Employee items by ID. """
  updateEmployees(data: [EmployeesUpdateInput]): [Employee]

  """ Delete a single Employee item by ID. """
  deleteEmployee(id: ID!): Employee

  """ Delete multiple Employee items by ID. """
  deleteEmployees(ids: [ID!]): [Employee]

  """ Create a single Expense item. """
  createExpense(data: ExpenseCreateInput): Expense

  """ Create multiple Expense items. """
  createExpenses(data: [ExpensesCreateInput]): [Expense]

  """ Update a single Expense item by ID. """
  updateExpense(id: ID!, data: ExpenseUpdateInput): Expense

  """ Update multiple Expense items by ID. """
  updateExpenses(data: [ExpensesUpdateInput]): [Expense]

  """ Delete a single Expense item by ID. """
  deleteExpense(id: ID!): Expense

  """ Delete multiple Expense items by ID. """
  deleteExpenses(ids: [ID!]): [Expense]

  """ Create a single Shift item. """
  createShift(data: ShiftCreateInput): Shift

  """ Create multiple Shift items. """
  createShifts(data: [ShiftsCreateInput]): [Shift]

  """ Update a single Shift item by ID. """
  updateShift(id: ID!, data: ShiftUpdateInput): Shift

  """ Update multiple Shift items by ID. """
  updateShifts(data: [ShiftsUpdateInput]): [Shift]

  """ Delete a single Shift item by ID. """
  deleteShift(id: ID!): Shift

  """ Delete multiple Shift items by ID. """
  deleteShifts(ids: [ID!]): [Shift]
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult!
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
  endSession: Boolean!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

union AuthenticatedItem = User

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  code: PasswordAuthErrorCode!
  message: String!
}

enum PasswordAuthErrorCode {
  FAILURE
  IDENTITY_NOT_FOUND
  SECRET_NOT_SET
  MULTIPLE_IDENTITY_MATCHES
  SECRET_MISMATCH
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  """ Search for all User items which match the where clause. """
  allUsers(where: UserWhereInput, search: String, sortBy: [SortUsersBy!], orderBy: String, first: Int, skip: Int): [User]

  """ Search for the User item with the matching ID. """
  User(where: UserWhereUniqueInput!): User

  """ Perform a meta-query on all User items which match the where clause. """
  _allUsersMeta(where: UserWhereInput, search: String, sortBy: [SortUsersBy!], orderBy: String, first: Int, skip: Int): _QueryMeta

  """ Retrieve the meta-data for the User list. """
  _UsersMeta: _ListMeta

  """ Search for all Employee items which match the where clause. """
  allEmployees(where: EmployeeWhereInput, search: String, sortBy: [SortEmployeesBy!], orderBy: String, first: Int, skip: Int): [Employee]

  """ Search for the Employee item with the matching ID. """
  Employee(where: EmployeeWhereUniqueInput!): Employee

  """ Perform a meta-query on all Employee items which match the where clause. 
  """
  _allEmployeesMeta(where: EmployeeWhereInput, search: String, sortBy: [SortEmployeesBy!], orderBy: String, first: Int, skip: Int): _QueryMeta

  """ Retrieve the meta-data for the Employee list. """
  _EmployeesMeta: _ListMeta

  """ Search for all Expense items which match the where clause. """
  allExpenses(where: ExpenseWhereInput, search: String, sortBy: [SortExpensesBy!], orderBy: String, first: Int, skip: Int): [Expense]

  """ Search for the Expense item with the matching ID. """
  Expense(where: ExpenseWhereUniqueInput!): Expense

  """ Perform a meta-query on all Expense items which match the where clause. 
  """
  _allExpensesMeta(where: ExpenseWhereInput, search: String, sortBy: [SortExpensesBy!], orderBy: String, first: Int, skip: Int): _QueryMeta

  """ Retrieve the meta-data for the Expense list. """
  _ExpensesMeta: _ListMeta

  """ Search for all Shift items which match the where clause. """
  allShifts(where: ShiftWhereInput, search: String, sortBy: [SortShiftsBy!], orderBy: String, first: Int, skip: Int): [Shift]

  """ Search for the Shift item with the matching ID. """
  Shift(where: ShiftWhereUniqueInput!): Shift

  """ Perform a meta-query on all Shift items which match the where clause. 
  """
  _allShiftsMeta(where: ShiftWhereInput, search: String, sortBy: [SortShiftsBy!], orderBy: String, first: Int, skip: Int): _QueryMeta

  """ Retrieve the meta-data for the Shift list. """
  _ShiftsMeta: _ListMeta

  """ Retrieve the meta-data for all lists. """
  _ksListsMeta(where: _ksListsMetaInput): [_ListMeta]
  authenticatedItem: AuthenticatedItem
  keystone: KeystoneMeta!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID!): KeystoneAdminUIFieldMetaItemView
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode!
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
